// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // 可以根据需要更改为 sqlite, mysql 等
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // 添加密码字段
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  researches Research[]
  questions  Question[]
  accounts   Account[]
  sessions   Session[]

  @@map("users")
}

// NextAuth 账户模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth 会话模型
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth 验证令牌模型
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 研究报告模型 - 顶层组织单元
model Research {
  id    String @id @default(cuid())
  title String // 研究的标题

  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 关联
  userId    String?
  user      User?            @relation(fields: [userId], references: [id])
  questions Question[] // 研究中的多个问题
  results   ResearchResult[] // 研究生成的多个结果
  sources   Source[]
  related   Related[]
  tags      Tag[]
  File      File[]

  @@map("researches")
}

// 用户提问模型
model Question {
  id        String   @id @default(cuid())
  content   String   @db.Text
  model     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  userId     String?
  user       User?           @relation(fields: [userId], references: [id])
  researchId String?
  research   Research?       @relation(fields: [researchId], references: [id])
  files      File[] // 问题关联的文件
  result     ResearchResult? // 每个问题生成一个研究结果

  @@map("questions")
}

// 研究结果模型 - 每个问题对应的具体结果
model ResearchResult {
  id              String    @id @default(cuid())
  version         Int // 结果的版本号
  markdownContent String?   @db.Text
  summary         String?   @db.Text
  data            String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  status          String? // 研究的当前状态
  // 关联
  researchId      String?
  research        Research? @relation(fields: [researchId], references: [id])
  questionId      String    @unique // 每个问题只有一个结果
  question        Question  @relation(fields: [questionId], references: [id])

  @@map("research_results")
}

// 来源模型
model Source {
  id         String  @id @default(cuid())
  sourceId   String // 原始来源ID
  title      String
  url        String
  source     String
  sourceIcon String?

  // 关联
  researchId String?
  research   Research? @relation(fields: [researchId], references: [id])

  @@map("sources")
}

// 相关研究模型
model Related {
  id          String  @id @default(cuid())
  title       String
  url         String
  date        String?
  description String?

  // 关联
  researchId String?
  research   Research? @relation(fields: [researchId], references: [id])

  @@map("related")
}

// 标签模型
model Tag {
  id   String @id @default(cuid())
  name String @unique

  // 关联
  researches Research[]

  @@map("tags")
}

// 文件模型
model File {
  id        String   @id @default(cuid())
  fileId    String // 外部存储系统的文件ID
  name      String // 文件名
  size      String // 文件大小（格式化的字符串）
  type      String // 文件MIME类型
  url       String? // 文件访问URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  researchId String?
  research   Research? @relation(fields: [researchId], references: [id])
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id])

  @@map("files")
}
